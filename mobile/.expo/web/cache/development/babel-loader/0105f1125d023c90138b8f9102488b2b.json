{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"com.apple.developer.associated-domains\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureApplicationTargetEntitlementsFileConfigured = ensureApplicationTargetEntitlementsFileConfigured;\nexports.getEntitlementsPath = getEntitlementsPath;\nexports.setAssociatedDomains = setAssociatedDomains;\nexports.withAssociatedDomains = void 0;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  var data = _interopRequireDefault(require(\"slash\"));\n\n  _slash = function _slash() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Target() {\n  var data = require(\"./Target\");\n\n  _Target = function _Target() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _string() {\n  var data = require(\"./utils/string\");\n\n  _string = function _string() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withAssociatedDomains = (0, _iosPlugins().createEntitlementsPlugin)(setAssociatedDomains, 'withAssociatedDomains');\nexports.withAssociatedDomains = withAssociatedDomains;\n\nfunction setAssociatedDomains(config, _ref) {\n  var _ = _ref['com.apple.developer.associated-domains'],\n      entitlementsPlist = _objectWithoutProperties(_ref, _excluded);\n\n  var _config$ios;\n\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.associatedDomains) {\n    return _objectSpread(_objectSpread({}, entitlementsPlist), {}, {\n      'com.apple.developer.associated-domains': config.ios.associatedDomains\n    });\n  }\n\n  return entitlementsPlist;\n}\n\nfunction getEntitlementsPath(projectRoot) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      targetName = _ref2.targetName,\n      _ref2$buildConfigurat = _ref2.buildConfiguration,\n      buildConfiguration = _ref2$buildConfigurat === void 0 ? 'Release' : _ref2$buildConfigurat;\n\n  var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n  var xcBuildConfiguration = (0, _Target().getXCBuildConfigurationFromPbxproj)(project, {\n    targetName: targetName,\n    buildConfiguration: buildConfiguration\n  });\n\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n\n  var entitlementsPath = getEntitlementsPathFromBuildConfiguration(projectRoot, xcBuildConfiguration);\n  return entitlementsPath && _fs().default.existsSync(entitlementsPath) ? entitlementsPath : null;\n}\n\nfunction getEntitlementsPathFromBuildConfiguration(projectRoot, xcBuildConfiguration) {\n  var _xcBuildConfiguration;\n\n  var entitlementsPathRaw = xcBuildConfiguration === null || xcBuildConfiguration === void 0 ? void 0 : (_xcBuildConfiguration = xcBuildConfiguration.buildSettings) === null || _xcBuildConfiguration === void 0 ? void 0 : _xcBuildConfiguration.CODE_SIGN_ENTITLEMENTS;\n\n  if (entitlementsPathRaw) {\n    return _path().default.normalize(_path().default.join(projectRoot, 'ios', (0, _string().trimQuotes)(entitlementsPathRaw)));\n  } else {\n    return null;\n  }\n}\n\nfunction ensureApplicationTargetEntitlementsFileConfigured(projectRoot) {\n  var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n  var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n  var productName = (0, _Xcodeproj().getProductName)(project);\n\n  var _ref3 = (0, _Target().findFirstNativeTarget)(project),\n      _ref4 = _slicedToArray(_ref3, 2),\n      applicationTarget = _ref4[1];\n\n  var buildConfigurations = (0, _Xcodeproj().getBuildConfigurationsForListId)(project, applicationTarget.buildConfigurationList);\n  var hasChangesToWrite = false;\n\n  for (var _ref5 of buildConfigurations) {\n    var _ref6 = _slicedToArray(_ref5, 2);\n\n    var xcBuildConfiguration = _ref6[1];\n    var oldEntitlementPath = getEntitlementsPathFromBuildConfiguration(projectRoot, xcBuildConfiguration);\n\n    if (oldEntitlementPath && _fs().default.existsSync(oldEntitlementPath)) {\n      return;\n    }\n\n    hasChangesToWrite = true;\n    var entitlementsRelativePath = (0, _slash().default)(_path().default.join(projectName, productName + \".entitlements\"));\n\n    var entitlementsPath = _path().default.normalize(_path().default.join(projectRoot, 'ios', entitlementsRelativePath));\n\n    _fs().default.mkdirSync(_path().default.dirname(entitlementsPath), {\n      recursive: true\n    });\n\n    if (!_fs().default.existsSync(entitlementsPath)) {\n      _fs().default.writeFileSync(entitlementsPath, ENTITLEMENTS_TEMPLATE);\n    }\n\n    xcBuildConfiguration.buildSettings.CODE_SIGN_ENTITLEMENTS = entitlementsRelativePath;\n  }\n\n  if (hasChangesToWrite) {\n    _fs().default.writeFileSync(project.filepath, project.writeSync());\n  }\n}\n\nvar ENTITLEMENTS_TEMPLATE = \"\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n</dict>\\n</plist>\\n\";","map":{"version":3,"mappings":"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","names":["_fs","_path","_slash","_iosPlugins","_Target","_Xcodeproj","_string","withAssociatedDomains","setAssociatedDomains","config","_","entitlementsPlist","ios","_config$ios","associatedDomains","getEntitlementsPath","projectRoot","targetName","buildConfiguration","project","xcBuildConfiguration","entitlementsPath","getEntitlementsPathFromBuildConfiguration","fs","existsSync","entitlementsPathRaw","buildSettings","_xcBuildConfiguration","CODE_SIGN_ENTITLEMENTS","path","normalize","join","ensureApplicationTargetEntitlementsFileConfigured","projectName","productName","applicationTarget","buildConfigurations","buildConfigurationList","hasChangesToWrite","oldEntitlementPath","entitlementsRelativePath","mkdirSync","dirname","recursive","writeFileSync","ENTITLEMENTS_TEMPLATE","filepath","writeSync"],"sources":["../../src/ios/Entitlements.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport path from 'path';\nimport slash from 'slash';\nimport { XCBuildConfiguration } from 'xcode';\n\nimport { createEntitlementsPlugin } from '../plugins/ios-plugins';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport {\n  getBuildConfigurationsForListId,\n  getPbxproj,\n  getProductName,\n  getProjectName,\n} from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withAssociatedDomains = createEntitlementsPlugin(\n  setAssociatedDomains,\n  'withAssociatedDomains'\n);\n\nexport function setAssociatedDomains(\n  config: ExpoConfig,\n  { 'com.apple.developer.associated-domains': _, ...entitlementsPlist }: JSONObject\n): JSONObject {\n  if (config.ios?.associatedDomains) {\n    return {\n      ...entitlementsPlist,\n      'com.apple.developer.associated-domains': config.ios.associatedDomains,\n    };\n  }\n\n  return entitlementsPlist;\n}\n\nexport function getEntitlementsPath(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  const project = getPbxproj(projectRoot);\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  const entitlementsPath = getEntitlementsPathFromBuildConfiguration(\n    projectRoot,\n    xcBuildConfiguration\n  );\n  return entitlementsPath && fs.existsSync(entitlementsPath) ? entitlementsPath : null;\n}\n\nfunction getEntitlementsPathFromBuildConfiguration(\n  projectRoot: string,\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const entitlementsPathRaw = xcBuildConfiguration?.buildSettings?.CODE_SIGN_ENTITLEMENTS as\n    | string\n    | undefined;\n  if (entitlementsPathRaw) {\n    return path.normalize(path.join(projectRoot, 'ios', trimQuotes(entitlementsPathRaw)));\n  } else {\n    return null;\n  }\n}\n\nexport function ensureApplicationTargetEntitlementsFileConfigured(projectRoot: string): void {\n  const project = getPbxproj(projectRoot);\n  const projectName = getProjectName(projectRoot);\n  const productName = getProductName(project);\n\n  const [, applicationTarget] = findFirstNativeTarget(project);\n  const buildConfigurations = getBuildConfigurationsForListId(\n    project,\n    applicationTarget.buildConfigurationList\n  );\n  let hasChangesToWrite = false;\n  for (const [, xcBuildConfiguration] of buildConfigurations) {\n    const oldEntitlementPath = getEntitlementsPathFromBuildConfiguration(\n      projectRoot,\n      xcBuildConfiguration\n    );\n    if (oldEntitlementPath && fs.existsSync(oldEntitlementPath)) {\n      return;\n    }\n    hasChangesToWrite = true;\n    // Use posix formatted path, even on Windows\n    const entitlementsRelativePath = slash(path.join(projectName, `${productName}.entitlements`));\n    const entitlementsPath = path.normalize(\n      path.join(projectRoot, 'ios', entitlementsRelativePath)\n    );\n    fs.mkdirSync(path.dirname(entitlementsPath), { recursive: true });\n    if (!fs.existsSync(entitlementsPath)) {\n      fs.writeFileSync(entitlementsPath, ENTITLEMENTS_TEMPLATE);\n    }\n    xcBuildConfiguration.buildSettings.CODE_SIGN_ENTITLEMENTS = entitlementsRelativePath;\n  }\n  if (hasChangesToWrite) {\n    fs.writeFileSync(project.filepath, project.writeSync());\n  }\n}\n\nconst ENTITLEMENTS_TEMPLATE = `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n</dict>\n</plist>\n`;\n"]},"metadata":{},"sourceType":"script"}