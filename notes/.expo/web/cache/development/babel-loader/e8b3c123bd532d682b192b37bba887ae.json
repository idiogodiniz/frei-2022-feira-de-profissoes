{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBuildSourceFileToGroup = addBuildSourceFileToGroup;\nexports.addFileToGroupAndLink = addFileToGroupAndLink;\nexports.addFramework = addFramework;\nexports.addResourceFileToGroup = addResourceFileToGroup;\nexports.ensureGroupRecursively = ensureGroupRecursively;\nexports.getApplicationNativeTarget = getApplicationNativeTarget;\nexports.getBuildConfigurationForListIdAndName = getBuildConfigurationForListIdAndName;\nexports.getBuildConfigurationsForListId = getBuildConfigurationsForListId;\nexports.getHackyProjectName = getHackyProjectName;\nexports.getPbxproj = getPbxproj;\nexports.getProductName = getProductName;\nexports.getProjectName = getProjectName;\nexports.getProjectSection = getProjectSection;\nexports.getXCConfigurationListEntries = getXCConfigurationListEntries;\nexports.isBuildConfig = isBuildConfig;\nexports.isNotComment = isNotComment;\nexports.isNotTestHost = isNotTestHost;\nexports.resolvePathOrProject = resolvePathOrProject;\nexports.sanitizedName = sanitizedName;\nexports.unquote = unquote;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n\n  _slugify = function _slugify() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _pbxFile() {\n  var data = _interopRequireDefault(require(\"xcode/lib/pbxFile\"));\n\n  _pbxFile = function _pbxFile() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"../Paths\"));\n\n  Paths = function Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _string() {\n  var data = require(\"./string\");\n\n  _string = function _string() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getProjectName(projectRoot) {\n  var sourceRoot = Paths().getSourceRoot(projectRoot);\n  return _path().default.basename(sourceRoot);\n}\n\nfunction resolvePathOrProject(projectRootOrProject) {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch (_unused) {\n      return null;\n    }\n  }\n\n  return projectRootOrProject;\n}\n\nfunction sanitizedName(name) {\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects((0, _slugify().default)(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name) {\n  return name.replace(/[\\W_]+/g, '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\nfunction getHackyProjectName(projectRoot, config) {\n  try {\n    return getProjectName(projectRoot);\n  } catch (_unused2) {\n    var projectName = config.name;\n    (0, _assert().default)(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup(_ref) {\n  var filepath = _ref.filepath,\n      group = _ref.group;\n  var file = new (_pbxFile().default)(filepath);\n  var conflictingFile = group.children.find(function (child) {\n    return child.comment === file.basename;\n  });\n\n  if (conflictingFile) {\n    return null;\n  }\n\n  return file;\n}\n\nfunction addResourceFileToGroup(_ref2) {\n  var filepath = _ref2.filepath,\n      groupName = _ref2.groupName,\n      isBuildFile = _ref2.isBuildFile,\n      project = _ref2.project,\n      verbose = _ref2.verbose,\n      targetUuid = _ref2.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref3) {\n      var project = _ref3.project,\n          file = _ref3.file;\n      project.addToPbxFileReferenceSection(file);\n\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n\n      project.addToPbxResourcesBuildPhase(file);\n    }\n  });\n}\n\nfunction addBuildSourceFileToGroup(_ref4) {\n  var filepath = _ref4.filepath,\n      groupName = _ref4.groupName,\n      project = _ref4.project,\n      verbose = _ref4.verbose,\n      targetUuid = _ref4.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref5) {\n      var project = _ref5.project,\n          file = _ref5.file;\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    }\n  });\n}\n\nfunction addFileToGroupAndLink(_ref6) {\n  var filepath = _ref6.filepath,\n      groupName = _ref6.groupName,\n      project = _ref6.project,\n      verbose = _ref6.verbose,\n      addFileToProject = _ref6.addFileToProject,\n      targetUuid = _ref6.targetUuid;\n  var group = pbxGroupByPathOrAssert(project, groupName);\n  var file = createProjectFileForGroup({\n    filepath: filepath,\n    group: group\n  });\n\n  if (!file) {\n    if (verbose) {\n      (0, _warnings().addWarningIOS)('ios-xcode-project', \"Skipped adding duplicate file \\\"\" + filepath + \"\\\" to PBXGroup named \\\"\" + groupName + \"\\\"\");\n    }\n\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget === null || applicationNativeTarget === void 0 ? void 0 : applicationNativeTarget.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  addFileToProject({\n    project: project,\n    file: file\n  });\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename\n  });\n  return project;\n}\n\nfunction getApplicationNativeTarget(_ref7) {\n  var project = _ref7.project,\n      projectName = _ref7.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  (0, _assert().default)(applicationNativeTarget, \"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");\n  (0, _assert().default)(String(applicationNativeTarget.target.name) === projectName, \"Application native target name mismatch. Expected \" + projectName + \", but found \" + applicationNativeTarget.target.name + \".\");\n  return applicationNativeTarget;\n}\n\nfunction addFramework(_ref8) {\n  var project = _ref8.project,\n      projectName = _ref8.projectName,\n      framework = _ref8.framework;\n  var target = getApplicationNativeTarget({\n    project: project,\n    projectName: projectName\n  });\n  return project.addFramework(framework, {\n    target: target.uuid\n  });\n}\n\nfunction splitPath(path) {\n  return path.split('/');\n}\n\nvar findGroup = function findGroup(group, name) {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(function (group) {\n    return group.comment === name;\n  });\n};\n\nfunction findGroupInsideGroup(project, group, name) {\n  var foundGroup = findGroup(group, name);\n\n  if (foundGroup) {\n    var _project$getPBXGroupB;\n\n    return (_project$getPBXGroupB = project.getPBXGroupByKey(foundGroup.value)) !== null && _project$getPBXGroupB !== void 0 ? _project$getPBXGroupB : null;\n  }\n\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project, path) {\n  var _project$getFirstProj = project.getFirstProject(),\n      firstProject = _project$getFirstProj.firstProject;\n\n  var group = project.getPBXGroupByKey(firstProject.mainGroup);\n  var components = splitPath(path);\n\n  for (var name of components) {\n    var nextGroup = findGroupInsideGroup(project, group, name);\n\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(\"Xcode PBXGroup with name \\\"\" + path + \"\\\" could not be found in the Xcode project.\");\n  }\n\n  return group;\n}\n\nfunction ensureGroupRecursively(project, filepath) {\n  var _topMostGroup;\n\n  var components = splitPath(filepath);\n\n  var hasChild = function hasChild(group, name) {\n    return group.children.find(function (_ref9) {\n      var comment = _ref9.comment;\n      return comment === name;\n    });\n  };\n\n  var _project$getFirstProj2 = project.getFirstProject(),\n      firstProject = _project$getFirstProj2.firstProject;\n\n  var topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (var pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"')\n      });\n    }\n\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n\n  return (_topMostGroup = topMostGroup) !== null && _topMostGroup !== void 0 ? _topMostGroup : null;\n}\n\nfunction getPbxproj(projectRoot) {\n  var projectPath = Paths().getPBXProjectPath(projectRoot);\n\n  var project = _xcode().default.project(projectPath);\n\n  project.parseSync();\n  return project;\n}\n\nfunction getProductName(project) {\n  var productName = '$(TARGET_NAME)';\n\n  try {\n    productName = project.productName;\n  } catch (_unused3) {}\n\n  if (productName === '$(TARGET_NAME)') {\n    var _project$getFirstTarg, _project$getFirstTarg2;\n\n    var targetName = (_project$getFirstTarg = project.getFirstTarget()) === null || _project$getFirstTarg === void 0 ? void 0 : (_project$getFirstTarg2 = _project$getFirstTarg.firstTarget) === null || _project$getFirstTarg2 === void 0 ? void 0 : _project$getFirstTarg2.productName;\n    productName = targetName !== null && targetName !== void 0 ? targetName : productName;\n  }\n\n  return productName;\n}\n\nfunction getProjectSection(project) {\n  return project.pbxProjectSection();\n}\n\nfunction getXCConfigurationListEntries(project) {\n  var lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nfunction getBuildConfigurationsForListId(project, configurationListId) {\n  var configurationListEntries = getXCConfigurationListEntries(project);\n\n  var _configurationListEnt = configurationListEntries.find(function (_ref10) {\n    var _ref11 = _slicedToArray(_ref10, 1),\n        key = _ref11[0];\n\n    return key === configurationListId;\n  }),\n      _configurationListEnt2 = _slicedToArray(_configurationListEnt, 2),\n      configurationList = _configurationListEnt2[1];\n\n  var buildConfigurations = configurationList.buildConfigurations.map(function (i) {\n    return i.value;\n  });\n  return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 1),\n        key = _ref13[0];\n\n    return buildConfigurations.includes(key);\n  });\n}\n\nfunction getBuildConfigurationForListIdAndName(project, _ref14) {\n  var configurationListId = _ref14.configurationListId,\n      buildConfiguration = _ref14.buildConfiguration;\n  var xcBuildConfigurationEntry = getBuildConfigurationsForListId(project, configurationListId).find(function (i) {\n    return (0, _string().trimQuotes)(i[1].name) === buildConfiguration;\n  });\n\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\"Build configuration '\" + buildConfiguration + \"' does not exist in list with id '\" + configurationListId + \"'\");\n  }\n\n  return xcBuildConfigurationEntry;\n}\n\nfunction isBuildConfig(_ref15) {\n  var _ref16 = _slicedToArray(_ref15, 2),\n      sectionItem = _ref16[1];\n\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nfunction isNotTestHost(_ref17) {\n  var _ref18 = _slicedToArray(_ref17, 2),\n      sectionItem = _ref18[1];\n\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nfunction isNotComment(_ref19) {\n  var _ref20 = _slicedToArray(_ref19, 1),\n      key = _ref20[0];\n\n  return !key.endsWith(\"_comment\");\n}\n\nfunction unquote(value) {\n  var _value$match$, _value$match;\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  return (_value$match$ = (_value$match = value.match(/^\"(.*)\"$/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : value;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;EAAA;;EAAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AAUA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAAC;IAAA;EAAA;;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcO,SAASC,cAAT,CAAwBC,WAAxB,EAA6C;EAClD,IAAMC,UAAU,GAAGJ,KAAK,GAACK,aAANL,CAAoBG,WAApBH,CAAnB;EACA,OAAOM,gBAAKC,QAALD,CAAcF,UAAdE,CAAP;AACD;;AAEM,SAASE,oBAAT,CACLC,oBADK,EAEgB;EACrB,IAAI,OAAOA,oBAAP,KAAgC,QAApC,EAA8C;IAC5C,IAAI;MACF,OAAOC,UAAU,CAACD,oBAAD,CAAjB;IADF,EAEE,gBAAM;MACN,OAAO,IAAP;IACD;EACF;;EACD,OAAOA,oBAAP;;;AAIK,SAASE,aAAT,CAAuBC,IAAvB,EAAqC;EAE1C,OAAOC,wBAAwB,CAACD,IAAD,CAAxBC,IAAkCA,wBAAwB,CAAC,wBAAQD,IAAR,CAAD,CAA1DC,IAA6E,KAApF;AACD;;AAED,SAASA,wBAAT,CAAkCD,IAAlC,EAAgD;EAC9C,OAAOA,IAAI,CACRE,OADIF,CACI,SADJA,EACe,EADfA,EAEJG,SAFIH,CAEM,KAFNA,EAGJE,OAHIF,CAGI,kBAHJA,EAGwB,EAHxBA,CAAP;;;AAUK,SAASI,mBAAT,CAA6Bb,WAA7B,EAAkDc,MAAlD,EAA8E;EAEnF,IAAI;IACF,OAAOf,cAAc,CAACC,WAAD,CAArB;EADF,EAEE,iBAAM;IAEN,IAAMe,WAAW,GAAGD,MAAM,CAACL,IAA3B;IACA,uBAAOM,WAAP,EAAoB,sDAApB;IACA,OAAOP,aAAa,CAACO,WAAD,CAApB;EACD;AACF;;AAED,SAASC,yBAAT,OAA+F;EAAA,IAA1DC,QAA0D,QAA1DA,QAA0D;EAAA,IAAhDC,KAAgD,QAAhDA,KAAgD;EAC7F,IAAMC,IAAI,GAAG,KAAIC,kBAAJ,EAAYH,QAAZ,CAAb;EAEA,IAAMI,eAAe,GAAGH,KAAK,CAACI,QAANJ,CAAeK,IAAfL,CAAqBM,eAAD;IAAA,OAAWA,KAAK,CAACC,OAAND,KAAkBL,IAAI,CAACf,QAAlC;EAAA,CAApBc,CAAxB;;EACA,IAAIG,eAAJ,EAAqB;IAGnB,OAAO,IAAP;EACD;;EACD,OAAOF,IAAP;AACD;;AAMM,SAASO,sBAAT,QAeU;EAAA,IAdfT,QAce,SAdfA,QAce;EAAA,IAbfU,SAae,SAbfA,SAae;EAAA,IAXfC,WAWe,SAXfA,WAWe;EAAA,IAVfC,OAUe,SAVfA,OAUe;EAAA,IATfC,OASe,SATfA,OASe;EAAA,IARfC,UAQe,SARfA,UAQe;EACf,OAAOC,qBAAqB,CAAC;IAC3Bf,QAD2B,EAC3BA,QAD2B;IAE3BU,SAF2B,EAE3BA,SAF2B;IAG3BE,OAH2B,EAG3BA,OAH2B;IAI3BC,OAJ2B,EAI3BA,OAJ2B;IAK3BC,UAL2B,EAK3BA,UAL2B;IAM3BE,gBAN2B,mCAMS;MAAA,IAAjBJ,OAAiB,SAAjBA,OAAiB;MAAA,IAARV,IAAQ,SAARA,IAAQ;MAClCU,OAAO,CAACK,4BAARL,CAAqCV,IAArCU;;MACA,IAAID,WAAJ,EAAiB;QACfC,OAAO,CAACM,wBAARN,CAAiCV,IAAjCU;MACD;;MACDA,OAAO,CAACO,2BAARP,CAAoCV,IAApCU;IACD;EAZ0B,CAAD,CAA5B;AAcD;;AAMM,SAASQ,yBAAT,QAYU;EAAA,IAXfpB,QAWe,SAXfA,QAWe;EAAA,IAVfU,SAUe,SAVfA,SAUe;EAAA,IATfE,OASe,SATfA,OASe;EAAA,IARfC,OAQe,SARfA,OAQe;EAAA,IAPfC,UAOe,SAPfA,UAOe;EACf,OAAOC,qBAAqB,CAAC;IAC3Bf,QAD2B,EAC3BA,QAD2B;IAE3BU,SAF2B,EAE3BA,SAF2B;IAG3BE,OAH2B,EAG3BA,OAH2B;IAI3BC,OAJ2B,EAI3BA,OAJ2B;IAK3BC,UAL2B,EAK3BA,UAL2B;IAM3BE,gBAN2B,mCAMS;MAAA,IAAjBJ,OAAiB,SAAjBA,OAAiB;MAAA,IAARV,IAAQ,SAARA,IAAQ;MAClCU,OAAO,CAACK,4BAARL,CAAqCV,IAArCU;MACAA,OAAO,CAACM,wBAARN,CAAiCV,IAAjCU;MACAA,OAAO,CAACS,yBAART,CAAkCV,IAAlCU;IACD;EAV0B,CAAD,CAA5B;;;AAiBK,SAASG,qBAAT,QAcU;EAAA,IAbff,QAae,SAbfA,QAae;EAAA,IAZfU,SAYe,SAZfA,SAYe;EAAA,IAXfE,OAWe,SAXfA,OAWe;EAAA,IAVfC,OAUe,SAVfA,OAUe;EAAA,IATfG,gBASe,SATfA,gBASe;EAAA,IARfF,UAQe,SARfA,UAQe;EACf,IAAMb,KAAK,GAAGqB,sBAAsB,CAACV,OAAD,EAAUF,SAAV,CAApC;EAEA,IAAMR,IAAI,GAAGH,yBAAyB,CAAC;IAAEC,QAAF,EAAEA,QAAF;IAAYC;EAAZ,CAAD,CAAtC;;EAEA,IAAI,CAACC,IAAL,EAAW;IACT,IAAIW,OAAJ,EAAa;MAGX,+BACE,mBADF,uCAEoCb,QAFpC,+BAEoEU,SAFpE;IAID;;IACD,OAAOE,OAAP;EACD;;EAED,IAAIE,UAAU,IAAI,IAAlB,EAAwB;IACtBZ,IAAI,CAACqB,MAALrB,GAAcY,UAAdZ;EADF,OAEO;IACL,IAAMsB,uBAAuB,GAAGZ,OAAO,CAACa,SAARb,CAAkB,oCAAlBA,CAAhC;IACAV,IAAI,CAACqB,MAALrB,GAAcsB,uBAAd,SAAcA,2BAAd,WAAcA,GAAd,MAAcA,0BAAuB,CAAEE,IAAvCxB;EACD;;EAEDA,IAAI,CAACwB,IAALxB,GAAYU,OAAO,CAACe,YAARf,EAAZV;EACAA,IAAI,CAAC0B,OAAL1B,GAAeU,OAAO,CAACe,YAARf,EAAfV;EAEAc,gBAAgB,CAAC;IAAEJ,OAAF,EAAEA,OAAF;IAAWV;EAAX,CAAD,CAAhBc;EAEAf,KAAK,CAACI,QAANJ,CAAe4B,IAAf5B,CAAoB;IAClB6B,KAAK,EAAE5B,IAAI,CAAC0B,OADM;IAElBpB,OAAO,EAAEN,IAAI,CAACf;EAFI,CAApBc;EAIA,OAAOW,OAAP;AACD;;AAEM,SAASmB,0BAAT,QAMJ;EAAA,IALDnB,OAKC,SALDA,OAKC;EAAA,IAJDd,WAIC,SAJDA,WAIC;EACD,IAAM0B,uBAAuB,GAAGZ,OAAO,CAACa,SAARb,CAAkB,oCAAlBA,CAAhC;EACA,uBACEY,uBADF;EAIA,uBACEQ,MAAM,CAACR,uBAAuB,CAACD,MAAxBC,CAA+BhC,IAAhC,CAANwC,KAAgDlC,WADlD,yDAEuDA,WAFvD,oBAEiF0B,uBAAuB,CAACD,MAAxBC,CAA+BhC,IAFhH;EAIA,OAAOgC,uBAAP;AACD;;AAQM,SAASS,YAAT,QAQJ;EAAA,IAPDrB,OAOC,SAPDA,OAOC;EAAA,IANDd,WAMC,SANDA,WAMC;EAAA,IALDoC,SAKC,SALDA,SAKC;EACD,IAAMX,MAAM,GAAGQ,0BAA0B,CAAC;IAAEnB,OAAF,EAAEA,OAAF;IAAWd;EAAX,CAAD,CAAzC;EACA,OAAOc,OAAO,CAACqB,YAARrB,CAAqBsB,SAArBtB,EAAgC;IAAEW,MAAM,EAAEA,MAAM,CAACG;EAAjB,CAAhCd,CAAP;AACD;;AAED,SAASuB,SAAT,CAAmBjD,IAAnB,EAA2C;EAEzC,OAAOA,IAAI,CAACkD,KAALlD,CAAW,GAAXA,CAAP;AACD;;AAED,IAAMmD,SAAS,GAAG,SAAZA,SAAY,CAChBpC,KADgB,EAEhBT,IAFgB,EAQD;EACf,IAAI,CAACS,KAAL,EAAY;IACV,OAAOqC,SAAP;EACD;;EAED,OAAOrC,KAAK,CAACI,QAANJ,CAAeK,IAAfL,CAAqBA,eAAD;IAAA,OAAWA,KAAK,CAACO,OAANP,KAAkBT,IAA7B;EAAA,CAApBS,CAAP;AAbF;;AAgBA,SAASsC,oBAAT,CACE3B,OADF,EAEEX,KAFF,EAGET,IAHF,EAImB;EACjB,IAAMgD,UAAU,GAAGH,SAAS,CAACpC,KAAD,EAAQT,IAAR,CAA5B;;EACA,IAAIgD,UAAJ,EAAgB;IAAA;;IACd,gCAAO5B,OAAO,CAAC6B,gBAAR7B,CAAyB4B,UAAU,CAACV,KAApClB,CAAP,yEAAqD,IAArD;EACD;;EACD,OAAO,IAAP;AACD;;AAED,SAASU,sBAAT,CAAgCV,OAAhC,EAAuD1B,IAAvD,EAA+E;EAC7E,4BAAyB0B,OAAO,CAAC8B,eAAR9B,EAAzB;EAAA,IAAQ+B,YAAR,yBAAQA,YAAR;;EAEA,IAAI1C,KAAK,GAAGW,OAAO,CAAC6B,gBAAR7B,CAAyB+B,YAAY,CAACC,SAAtChC,CAAZ;EAEA,IAAMiC,UAAU,GAAGV,SAAS,CAACjD,IAAD,CAA5B;;EACA,KAAK,IAAMM,IAAX,IAAmBqD,UAAnB,EAA+B;IAC7B,IAAMC,SAAS,GAAGP,oBAAoB,CAAC3B,OAAD,EAAUX,KAAV,EAAiBT,IAAjB,CAAtC;;IACA,IAAIsD,SAAJ,EAAe;MACb7C,KAAK,GAAG6C,SAAR7C;IADF,OAEO;MACL;IACD;EACF;;EAED,IAAI,CAACA,KAAL,EAAY;IACV,MAAM8C,KAAK,iCAA8B7D,IAA9B,iDAAX;EACD;;EAED,OAAOe,KAAP;AACD;;AAEM,SAAS+C,sBAAT,CAAgCpC,OAAhC,EAAuDZ,QAAvD,EAA0F;EAAA;;EAC/F,IAAM6C,UAAU,GAAGV,SAAS,CAACnC,QAAD,CAA5B;;EACA,IAAMiD,QAAQ,GAAG,SAAXA,QAAW,CAAChD,KAAD,EAAkBT,IAAlB;IAAA,OACfS,KAAK,CAACI,QAANJ,CAAeK,IAAfL,CAAoB;MAAA,IAAGO,OAAH,SAAGA,OAAH;MAAA,OAAiBA,OAAO,KAAKhB,IAA7B;IAAA,CAApBS,CADe;EAAA,CAAjB;;EAEA,6BAAyBW,OAAO,CAAC8B,eAAR9B,EAAzB;EAAA,IAAQ+B,YAAR,0BAAQA,YAAR;;EAEA,IAAIO,YAAY,GAAGtC,OAAO,CAAC6B,gBAAR7B,CAAyB+B,YAAY,CAACC,SAAtChC,CAAnB;;EAEA,KAAK,IAAMuC,aAAX,IAA4BN,UAA5B,EAAwC;IACtC,IAAIK,YAAY,IAAI,CAACD,QAAQ,CAACC,YAAD,EAAeC,aAAf,CAA7B,EAA4D;MAC1DD,YAAY,CAAC7C,QAAb6C,CAAsBrB,IAAtBqB,CAA2B;QACzB1C,OAAO,EAAE2C,aADgB;QAEzBrB,KAAK,EAAElB,OAAO,CAACwC,cAARxC,CAAuBuC,aAAvBvC,EAAsC,IAAtCA;MAFkB,CAA3BsC;IAID;;IACDA,YAAY,GAAGtC,OAAO,CAACyC,cAARzC,CAAuBuC,aAAvBvC,CAAfsC;EACD;;EACD,wBAAOA,YAAP,yDAAuB,IAAvB;AACD;;AAKM,SAAS5D,UAAT,CAAoBP,WAApB,EAAuD;EAC5D,IAAMuE,WAAW,GAAG1E,KAAK,GAAC2E,iBAAN3E,CAAwBG,WAAxBH,CAApB;;EACA,IAAMgC,OAAO,GAAG4C,iBAAM5C,OAAN4C,CAAcF,WAAdE,CAAhB;;EACA5C,OAAO,CAAC6C,SAAR7C;EACA,OAAOA,OAAP;AACD;;AAOM,SAAS8C,cAAT,CAAwB9C,OAAxB,EAAuD;EAC5D,IAAI+C,WAAW,GAAG,gBAAlB;;EACA,IAAI;IAKFA,WAAW,GAAG/C,OAAO,CAAC+C,WAAtBA;EALF,EAME,iBAAM,CAAE;;EAEV,IAAIA,WAAW,KAAK,gBAApB,EAAsC;IAAA;;IACpC,IAAMC,UAAU,4BAAGhD,OAAO,CAACiD,cAARjD,EAAH,oFAAGkD,sBAA0BC,WAA7B,2DAAGC,uBAAuCL,WAA1D;IACAA,WAAW,GAAGC,UAAH,SAAGA,cAAH,WAAGA,gBAAcD,WAA5BA;EACD;;EAED,OAAOA,WAAP;AACD;;AAEM,SAASM,iBAAT,CAA2BrD,OAA3B,EAAkD;EACvD,OAAOA,OAAO,CAACsD,iBAARtD,EAAP;AACD;;AAEM,SAASuD,6BAAT,CAAuCvD,OAAvC,EAAwF;EAC7F,IAAMwD,KAAK,GAAGxD,OAAO,CAACyD,sBAARzD,EAAd;EACA,OAAO0D,MAAM,CAACC,OAAPD,CAAeF,KAAfE,EAAsBE,MAAtBF,CAA6BG,YAA7BH,CAAP;AACD;;AAEM,SAASI,+BAAT,CACL9D,OADK,EAEL+D,mBAFK,EAGwB;EAC7B,IAAMC,wBAAwB,GAAGT,6BAA6B,CAACvD,OAAD,CAA9D;;EACA,4BAA8BgE,wBAAwB,CAACtE,IAAzBsE,CAC5B;IAAA;IAAA,IAAEC,GAAF;;IAAA,OAAWA,GAAG,KAAKF,mBAAnB;EAAA,CAD4BC,CAA9B;EAAA;EAAA,IAASE,iBAAT;;EAIA,IAAMC,mBAAmB,GAAGD,iBAAiB,CAACC,mBAAlBD,CAAsCE,GAAtCF,CAA2CG,WAAD;IAAA,OAAOA,CAAC,CAACnD,KAAT;EAAA,CAA1CgD,CAA5B;EAEA,OAAOR,MAAM,CAACC,OAAPD,CAAe1D,OAAO,CAACsE,8BAARtE,EAAf0D,EACJE,MADIF,CACGG,YADHH,EAEJE,MAFIF,CAEGa,aAFHb,EAGJE,MAHIF,CAGG;IAAA;IAAA,IAAEO,GAAF;;IAAA,OAAsCE,mBAAmB,CAACK,QAApBL,CAA6BF,GAA7BE,CAAtC;EAAA,CAHHT,CAAP;AAID;;AAEM,SAASe,qCAAT,CACLzE,OADK,UAMsB;EAAA,IAHzB+D,mBAGyB,UAHzBA,mBAGyB;EAAA,IAFzBW,kBAEyB,UAFzBA,kBAEyB;EAC3B,IAAMC,yBAAyB,GAAGb,+BAA+B,CAC/D9D,OAD+D,EAE/D+D,mBAF+D,CAA/BD,CAGhCpE,IAHgCoE,CAG1BO,WAAD;IAAA,OAAO,0BAAWA,CAAC,CAAC,CAAD,CAADA,CAAKzF,IAAhB,MAA0B8F,kBAAjC;EAAA,CAH2BZ,CAAlC;;EAIA,IAAI,CAACa,yBAAL,EAAgC;IAC9B,MAAM,IAAIxC,KAAJ,2BACoBuC,kBADpB,0CAC2EX,mBAD3E,OAAN;EAGD;;EACD,OAAOY,yBAAP;AACD;;AAEM,SAASJ,aAAT,SAA4E;EAAA;EAAA,IAAlDK,WAAkD;;EACjF,OAAOA,WAAW,CAACC,GAAZD,KAAoB,sBAA3B;AACD;;AAEM,SAASE,aAAT,SAA4E;EAAA;EAAA,IAAlDF,WAAkD;;EACjF,OAAO,CAACA,WAAW,CAACG,aAAZH,CAA0BI,SAAlC;AACD;;AAEM,SAASnB,YAAT,SAIgC;EAAA;EAAA,IAJTI,GAIS;;EACrC,OAAO,CAACA,GAAG,CAACgB,QAAJhB,YAAR;;;AAIK,SAASiB,OAAT,CAAiBhE,KAAjB,EAAwC;EAAA;;EAE7C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7BA,KAAK,GAAGE,MAAM,CAACF,KAAD,CAAdA;EACD;;EACD,wCAAOA,KAAK,CAACiE,KAANjE,CAAY,UAAZA,CAAP,iDAAOkE,aAA0B,CAA1B,CAAP,yDAAuClE,KAAvC;AACD","names":["_assert","_path","_slugify","_xcode","_pbxFile","_warnings","Paths","_string","getProjectName","projectRoot","sourceRoot","getSourceRoot","path","basename","resolvePathOrProject","projectRootOrProject","getPbxproj","sanitizedName","name","sanitizedNameForProjects","replace","normalize","getHackyProjectName","config","projectName","createProjectFileForGroup","filepath","group","file","pbxFile","conflictingFile","children","find","child","comment","addResourceFileToGroup","groupName","isBuildFile","project","verbose","targetUuid","addFileToGroupAndLink","addFileToProject","addToPbxFileReferenceSection","addToPbxBuildFileSection","addToPbxResourcesBuildPhase","addBuildSourceFileToGroup","addToPbxSourcesBuildPhase","pbxGroupByPathOrAssert","target","applicationNativeTarget","getTarget","uuid","generateUuid","fileRef","push","value","getApplicationNativeTarget","String","addFramework","framework","splitPath","split","findGroup","undefined","findGroupInsideGroup","foundGroup","getPBXGroupByKey","getFirstProject","firstProject","mainGroup","components","nextGroup","Error","ensureGroupRecursively","hasChild","topMostGroup","pathComponent","pbxCreateGroup","pbxGroupByName","projectPath","getPBXProjectPath","xcode","parseSync","getProductName","productName","targetName","getFirstTarget","_project$getFirstTarg","firstTarget","_project$getFirstTarg2","getProjectSection","pbxProjectSection","getXCConfigurationListEntries","lists","pbxXCConfigurationList","Object","entries","filter","isNotComment","getBuildConfigurationsForListId","configurationListId","configurationListEntries","key","configurationList","buildConfigurations","map","i","pbxXCBuildConfigurationSection","isBuildConfig","includes","getBuildConfigurationForListIdAndName","buildConfiguration","xcBuildConfigurationEntry","sectionItem","isa","isNotTestHost","buildSettings","TEST_HOST","endsWith","unquote","match","_value$match"],"sources":["../../../src/ios/utils/Xcodeproj.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\nimport { trimQuotes } from './string';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find((child) => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find((group) => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map((i) => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find((i) => trimQuotes(i[1].name) === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}