{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TargetType = void 0;\nexports.findApplicationTargetWithDependenciesAsync = findApplicationTargetWithDependenciesAsync;\nexports.findFirstNativeTarget = findFirstNativeTarget;\nexports.findNativeTargetByName = findNativeTargetByName;\nexports.findSignableTargets = findSignableTargets;\nexports.getNativeTargets = getNativeTargets;\nexports.getXCBuildConfigurationFromPbxproj = getXCBuildConfigurationFromPbxproj;\nexports.isTargetOfType = isTargetOfType;\n\nfunction _BuildScheme() {\n  var data = require(\"./BuildScheme\");\n\n  _BuildScheme = function _BuildScheme() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _string() {\n  var data = require(\"./utils/string\");\n\n  _string = function _string() {\n    return data;\n  };\n\n  return data;\n}\n\nvar TargetType;\nexports.TargetType = TargetType;\n\n(function (TargetType) {\n  TargetType[\"APPLICATION\"] = \"com.apple.product-type.application\";\n  TargetType[\"EXTENSION\"] = \"com.apple.product-type.app-extension\";\n  TargetType[\"WATCH\"] = \"com.apple.product-type.application.watchapp\";\n  TargetType[\"APP_CLIP\"] = \"com.apple.product-type.application.on-demand-install-capable\";\n  TargetType[\"STICKER_PACK_EXTENSION\"] = \"com.apple.product-type.app-extension.messages-sticker-pack\";\n  TargetType[\"OTHER\"] = \"other\";\n})(TargetType || (exports.TargetType = TargetType = {}));\n\nfunction getXCBuildConfigurationFromPbxproj(project) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      targetName = _ref.targetName,\n      _ref$buildConfigurati = _ref.buildConfiguration,\n      buildConfiguration = _ref$buildConfigurati === void 0 ? 'Release' : _ref$buildConfigurati;\n\n  var _ref2 = targetName ? findNativeTargetByName(project, targetName) : findFirstNativeTarget(project),\n      _ref3 = _slicedToArray(_ref2, 2),\n      nativeTarget = _ref3[1];\n\n  var _ref4 = (0, _Xcodeproj().getBuildConfigurationForListIdAndName)(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration: buildConfiguration\n  }),\n      _ref5 = _slicedToArray(_ref4, 2),\n      xcBuildConfiguration = _ref5[1];\n\n  return xcBuildConfiguration !== null && xcBuildConfiguration !== void 0 ? xcBuildConfiguration : null;\n}\n\nfunction findApplicationTargetWithDependenciesAsync(_x, _x2) {\n  return _findApplicationTargetWithDependenciesAsync.apply(this, arguments);\n}\n\nfunction _findApplicationTargetWithDependenciesAsync() {\n  _findApplicationTargetWithDependenciesAsync = _asyncToGenerator(function* (projectRoot, scheme) {\n    var applicationTargetName = yield (0, _BuildScheme().getApplicationTargetNameForSchemeAsync)(projectRoot, scheme);\n    var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n\n    var _findNativeTargetByNa = findNativeTargetByName(project, applicationTargetName),\n        _findNativeTargetByNa2 = _slicedToArray(_findNativeTargetByNa, 2),\n        applicationTarget = _findNativeTargetByNa2[1];\n\n    var dependencies = getTargetDependencies(project, applicationTarget);\n    return {\n      name: (0, _string().trimQuotes)(applicationTarget.name),\n      type: TargetType.APPLICATION,\n      dependencies: dependencies\n    };\n  });\n  return _findApplicationTargetWithDependenciesAsync.apply(this, arguments);\n}\n\nfunction getTargetDependencies(project, parentTarget) {\n  if (!parentTarget.dependencies || parentTarget.dependencies.length === 0) {\n    return undefined;\n  }\n\n  return parentTarget.dependencies.map(function (_ref6) {\n    var value = _ref6.value;\n\n    var _project$getPBXGroupB = project.getPBXGroupByKeyAndType(value, 'PBXTargetDependency'),\n        targetId = _project$getPBXGroupB.target;\n\n    var _findNativeTargetById = findNativeTargetById(project, targetId),\n        _findNativeTargetById2 = _slicedToArray(_findNativeTargetById, 2),\n        target = _findNativeTargetById2[1];\n\n    var type = isTargetOfType(target, TargetType.EXTENSION) ? TargetType.EXTENSION : TargetType.OTHER;\n    return {\n      name: (0, _string().trimQuotes)(target.name),\n      type: type,\n      dependencies: getTargetDependencies(project, target)\n    };\n  });\n}\n\nfunction isTargetOfType(target, targetType) {\n  return (0, _string().trimQuotes)(target.productType) === targetType;\n}\n\nfunction getNativeTargets(project) {\n  var section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(_Xcodeproj().isNotComment);\n}\n\nfunction findSignableTargets(project) {\n  var targets = getNativeTargets(project);\n  var signableTargetTypes = [TargetType.APPLICATION, TargetType.APP_CLIP, TargetType.EXTENSION, TargetType.WATCH, TargetType.STICKER_PACK_EXTENSION];\n  var applicationTargets = targets.filter(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        target = _ref8[1];\n\n    for (var targetType of signableTargetTypes) {\n      if (isTargetOfType(target, targetType)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  if (applicationTargets.length === 0) {\n    throw new Error(\"Could not find any signable targets in project.pbxproj\");\n  }\n\n  return applicationTargets;\n}\n\nfunction findFirstNativeTarget(project) {\n  var targets = getNativeTargets(project);\n  var applicationTargets = targets.filter(function (_ref9) {\n    var _ref10 = _slicedToArray(_ref9, 2),\n        target = _ref10[1];\n\n    return isTargetOfType(target, TargetType.APPLICATION);\n  });\n\n  if (applicationTargets.length === 0) {\n    throw new Error(\"Could not find any application target in project.pbxproj\");\n  }\n\n  return applicationTargets[0];\n}\n\nfunction findNativeTargetByName(project, targetName) {\n  var nativeTargets = getNativeTargets(project);\n  var nativeTargetEntry = nativeTargets.find(function (_ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n        i = _ref12[1];\n\n    return (0, _string().trimQuotes)(i.name) === targetName;\n  });\n\n  if (!nativeTargetEntry) {\n    throw new Error(\"Could not find target '\" + targetName + \"' in project.pbxproj\");\n  }\n\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project, targetId) {\n  var nativeTargets = getNativeTargets(project);\n  var nativeTargetEntry = nativeTargets.find(function (_ref13) {\n    var _ref14 = _slicedToArray(_ref13, 1),\n        key = _ref14[0];\n\n    return key === targetId;\n  });\n\n  if (!nativeTargetEntry) {\n    throw new Error(\"Could not find target with id '\" + targetId + \"' in project.pbxproj\");\n  }\n\n  return nativeTargetEntry;\n}","map":{"version":3,"mappings":"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","names":["_BuildScheme","_Xcodeproj","_string","TargetType","getXCBuildConfigurationFromPbxproj","project","targetName","buildConfiguration","findNativeTargetByName","findFirstNativeTarget","nativeTarget","configurationListId","buildConfigurationList","xcBuildConfiguration","findApplicationTargetWithDependenciesAsync","projectRoot","scheme","applicationTargetName","applicationTarget","dependencies","getTargetDependencies","name","type","APPLICATION","parentTarget","length","undefined","map","value","getPBXGroupByKeyAndType","targetId","target","findNativeTargetById","isTargetOfType","EXTENSION","OTHER","targetType","productType","getNativeTargets","section","pbxNativeTargetSection","Object","entries","filter","isNotComment","findSignableTargets","targets","signableTargetTypes","APP_CLIP","WATCH","STICKER_PACK_EXTENSION","applicationTargets","Error","nativeTargets","nativeTargetEntry","find","i","key"],"sources":["../../src/ios/Target.ts"],"sourcesContent":["import { PBXNativeTarget, PBXTargetDependency, XCBuildConfiguration, XcodeProject } from 'xcode';\n\nimport { getApplicationTargetNameForSchemeAsync } from './BuildScheme';\nimport {\n  getBuildConfigurationForListIdAndName,\n  getPbxproj,\n  isNotComment,\n  NativeTargetSectionEntry,\n} from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport enum TargetType {\n  APPLICATION = 'com.apple.product-type.application',\n  EXTENSION = 'com.apple.product-type.app-extension',\n  WATCH = 'com.apple.product-type.application.watchapp',\n  APP_CLIP = 'com.apple.product-type.application.on-demand-install-capable',\n  STICKER_PACK_EXTENSION = 'com.apple.product-type.app-extension.messages-sticker-pack',\n  OTHER = 'other',\n}\n\nexport interface Target {\n  name: string;\n  type: TargetType;\n  dependencies?: Target[];\n}\n\nexport function getXCBuildConfigurationFromPbxproj(\n  project: XcodeProject,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): XCBuildConfiguration | null {\n  const [, nativeTarget] = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [, xcBuildConfiguration] = getBuildConfigurationForListIdAndName(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration,\n  });\n  return xcBuildConfiguration ?? null;\n}\n\nexport async function findApplicationTargetWithDependenciesAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<Target> {\n  const applicationTargetName = await getApplicationTargetNameForSchemeAsync(projectRoot, scheme);\n  const project = getPbxproj(projectRoot);\n  const [, applicationTarget] = findNativeTargetByName(project, applicationTargetName);\n  const dependencies = getTargetDependencies(project, applicationTarget);\n  return {\n    name: trimQuotes(applicationTarget.name),\n    type: TargetType.APPLICATION,\n    dependencies,\n  };\n}\n\nfunction getTargetDependencies(\n  project: XcodeProject,\n  parentTarget: PBXNativeTarget\n): Target[] | undefined {\n  if (!parentTarget.dependencies || parentTarget.dependencies.length === 0) {\n    return undefined;\n  }\n  return parentTarget.dependencies.map(({ value }) => {\n    const { target: targetId } = project.getPBXGroupByKeyAndType(\n      value,\n      'PBXTargetDependency'\n    ) as PBXTargetDependency;\n\n    const [, target] = findNativeTargetById(project, targetId);\n\n    const type = isTargetOfType(target, TargetType.EXTENSION)\n      ? TargetType.EXTENSION\n      : TargetType.OTHER;\n    return {\n      name: trimQuotes(target.name),\n      type,\n      dependencies: getTargetDependencies(project, target),\n    };\n  });\n}\n\nexport function isTargetOfType(target: PBXNativeTarget, targetType: TargetType): boolean {\n  return trimQuotes(target.productType) === targetType;\n}\n\nexport function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(isNotComment);\n}\n\nexport function findSignableTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const targets = getNativeTargets(project);\n\n  const signableTargetTypes = [\n    TargetType.APPLICATION,\n    TargetType.APP_CLIP,\n    TargetType.EXTENSION,\n    TargetType.WATCH,\n    TargetType.STICKER_PACK_EXTENSION,\n  ];\n\n  const applicationTargets = targets.filter(([, target]) => {\n    for (const targetType of signableTargetTypes) {\n      if (isTargetOfType(target, targetType)) {\n        return true;\n      }\n    }\n    return false;\n  });\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any signable targets in project.pbxproj`);\n  }\n  return applicationTargets;\n}\n\nexport function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(([, target]) =>\n    isTargetOfType(target, TargetType.APPLICATION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any application target in project.pbxproj`);\n  }\n  return applicationTargets[0];\n}\n\nexport function findNativeTargetByName(\n  project: XcodeProject,\n  targetName: string\n): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(([, i]) => trimQuotes(i.name) === targetName);\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target '${targetName}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project: XcodeProject, targetId: string): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(([key]) => key === targetId);\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target with id '${targetId}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n"]},"metadata":{},"sourceType":"script"}